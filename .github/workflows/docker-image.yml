name: Docker Image CI

permissions: read-all

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  lint-docker:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Lint the Docker image
      uses: hadolint/hadolint-action@v3.1.0

  lint-code:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Install pylint
      run: pip install pylint

    - name: Run pylint
      run: pylint **/*.py

  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Build the docker image
      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Install pytest
      run: pip install pytest

    - name: Run pytest
      run: pytest


  version-check:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:latest

    - name: Run the container in the background
      run: docker run -d -p 8000:8000 --name my-container my-image-name:latest

    - name: Wait for the container to be ready
      run: |
        for i in {1..30}; do
          if curl -s http://localhost:8000/version; then
            echo "Service is up!"
            break
          fi
          echo "Waiting for the service to be available..."
          sleep 2
        done

    - name: Check container logs (optional for debugging)
      run: docker logs my-container

    - name: Test /version endpoint
      run: |
        response=$(curl -s http://localhost:8000/version)
        expected_version="v0.0.1"  
        if [[ "$response" != "$expected_version" ]]; then
          echo "Version check failed. Expected: $expected_version, but got: $response"
          exit 1
        fi